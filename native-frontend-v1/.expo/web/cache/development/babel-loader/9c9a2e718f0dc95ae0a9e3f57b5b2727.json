{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/gdpvirus/Desktop/projects/proj_1/native-frontend-v1/screens/Predict.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button } from \"react-native-elements\";\nimport * as DocumentPicker from \"expo-document-picker\";\nimport * as Linking from \"expo-linking\";\nimport { connect } from \"react-redux\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport mlapiService from \"../services/mlapi.service\";\nimport PropTypes from \"prop-types\";\n\nvar Predict = function Predict(props) {\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      token = _React$useState2[0],\n      setToken = _React$useState2[1];\n\n  var propTypes = {\n    user: PropTypes.object\n  };\n  React.useEffect(function () {\n    AsyncStorage.getItem(\"token\").then(function (res) {\n      setToken(res);\n    });\n  }, []);\n\n  var pickDocument = function pickDocument(e) {\n    var result, fileData, formData, config;\n    return _regeneratorRuntime.async(function pickDocument$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(DocumentPicker.getDocumentAsync({}));\n\n          case 3:\n            result = _context.sent;\n\n            if (!(result.type !== \"cancel\")) {\n              _context.next = 14;\n              break;\n            }\n\n            fileData = {\n              uri: result.uri,\n              name: result.name,\n              type: \"text/csv\"\n            };\n            formData = new FormData();\n            formData.append(\"user_id\", props.user.user_id);\n            formData.append(\"file\", fileData);\n            console.log(formData);\n            config = {\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n              }\n            };\n\n            if (token) {\n              config.headers[\"Authorization\"] = \"bearer \" + token;\n            }\n\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(mlapiService.predictData(formData, config).then(function (res) {\n              alert(\"Download starting on web\");\n              Linking.openURL(res.data.url);\n            }).catch(function (err) {\n              console.log(err);\n              alert(\"Try Again!!\");\n            }));\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    containerStyle: styles.btn,\n    title: \"Predict Data(Browser-Support)\",\n    onPress: pickDocument,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.auth.user\n  };\n};\n\nexport default connect(mapStateToProps, null)(Predict);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#212311\"\n  },\n  btn: {\n    margin: 10\n  }\n});","map":{"version":3,"sources":["/home/gdpvirus/Desktop/projects/proj_1/native-frontend-v1/screens/Predict.js"],"names":["React","Button","DocumentPicker","Linking","connect","AsyncStorage","mlapiService","PropTypes","Predict","props","useState","token","setToken","propTypes","user","object","useEffect","getItem","then","res","pickDocument","e","preventDefault","getDocumentAsync","result","type","fileData","uri","name","formData","FormData","append","user_id","console","log","config","headers","Accept","predictData","alert","openURL","data","url","catch","err","styles","container","btn","mapStateToProps","state","auth","StyleSheet","create","flex","backgroundColor","margin"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Button } from \"react-native-elements\";\nimport * as DocumentPicker from \"expo-document-picker\";\nimport * as Linking from \"expo-linking\";\nimport { connect } from \"react-redux\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport mlapiService from \"../services/mlapi.service\";\nimport PropTypes from \"prop-types\";\nconst Predict = (props) => {\n  const [token, setToken] = React.useState(null);\n\n  const propTypes = {\n    user: PropTypes.object,\n  };\n\n  React.useEffect(() => {\n    AsyncStorage.getItem(\"token\").then((res) => {\n      setToken(res);\n    });\n  }, []);\n\n  const pickDocument = async (e) => {\n    e.preventDefault();\n    let result = await DocumentPicker.getDocumentAsync({});\n    if (result.type !== \"cancel\") {\n      const fileData = {\n        uri: result.uri,\n        name: result.name,\n        type: \"text/csv\",\n      };\n\n      const formData = new FormData();\n\n      formData.append(\"user_id\", props.user.user_id);\n      formData.append(\"file\", fileData);\n      console.log(formData);\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      };\n\n      if (token) {\n        config.headers[\"Authorization\"] = `bearer ${token}`;\n      }\n      await mlapiService\n        .predictData(formData, config)\n        .then((res) => {\n          alert(\"Download starting on web\");\n          Linking.openURL(res.data.url);\n        })\n        .catch((err) => {\n          console.log(err);\n          alert(\"Try Again!!\");\n        });\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Button\n        containerStyle={styles.btn}\n        title={\"Predict Data(Browser-Support)\"}\n        onPress={pickDocument}\n      />\n    </View>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.auth.user,\n});\n\nexport default connect(mapStateToProps, null)(Predict);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#212311\",\n  },\n  btn: {\n    margin: 10,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}