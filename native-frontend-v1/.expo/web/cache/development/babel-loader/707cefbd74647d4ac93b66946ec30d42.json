{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/gdpvirus/Desktop/projects/proj_1/native-frontend-v1/node_modules/react-native-plotly/dist/plotly.js\";\n\nimport React, { useRef, useLayoutEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { WebView } from 'react-native-webview';\nimport PlotlyBasic from \"./lib/PlotlyBasic\";\nimport PlotlyFull from \"./lib/PlotlyFull\";\nvar messages = {\n  CHART_LOADED: 'CHART_LOADED'\n};\nvar errorHandlerFn = \"\\n  window.onerror = function(message, source, lineno, colno, error) {\\n    document.getElementById('error').innerHTML += message + '\\\\n';\\n  };\\n\";\n\nvar Plotly = function Plotly(props) {\n  var lastPropsRef = useRef(props);\n  var chart = useRef(null);\n  var loadedRef = useRef(false);\n  var html = \"\\n    <html>\\n    <head>\\n        <meta charset=\\\"utf-8\\\">\\n        <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\">\\n        <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\\n        <style type=\\\"text/css\\\">\\n        body {\\n          margin: 0;\\n          padding: 0;\\n          width: 100vw;\\n          height: 100vh;\\n        }\\n        .chart {\\n          width: 100vw;\\n          height: 100vh;\\n          \" + (props.debug ? 'background: papayawhip;' : '') + \"\\n        }\\n        .error {\\n          position: fixed;\\n          top: 10vh;\\n          max-width: 100vw;\\n          max-height: 40vh;\\n          overflow-y: scroll;\\n          background: pink;\\n          white-space: pre-wrap;\\n        }\\n        .debug {\\n          position: fixed;\\n          top: 50vh;\\n          max-width: 100vw;\\n          max-height: 40vh;\\n          overflow-y: scroll;\\n          background: rgb(234, 234, 234);\\n          white-space: pre-wrap;\\n          z-index: 1000;\\n        }\\n        </style>\\n    </head>\\n    \\n    <body >\\n      <div id=\\\"chart\\\" class=\\\"chart\\\"></div>\\n      <pre id=\\\"error\\\" class=\\\"error\\\"></pre>\\n      <pre id=\\\"debug\\\" class=\\\"debug\\\"></pre>\\n    </body>\\n    <script>\\n      /* This only runs on iOS, on android it is posted */\\n      \" + errorHandlerFn + \"\\n    </script>\\n    </html>\\n    \";\n\n  var invoke = function invoke(str) {\n    if (chart && chart.current) chart.current.injectJavaScript(\"(function(){\" + str + \"})()\");\n  };\n\n  var invokeEncoded = function invokeEncoded(str) {\n    invoke(\"eval(atob(\\\"\" + str + \"\\\"));\");\n  };\n\n  var initialPlot = function initialPlot(data, layout, config) {\n    invoke(\"\\n        window.Plotly.newPlot(\\n          'chart',\\n          \" + JSON.stringify(data) + \",\\n          \" + JSON.stringify(layout) + \",\\n          \" + JSON.stringify(config) + \"\\n        ).then(function() {\\n          window.ReactNativeWebView.postMessage('\" + messages.CHART_LOADED + \"');\\n        });\\n      \");\n  };\n\n  var plotlyReact = function plotlyReact(data, layout, config) {\n    invoke(\"\\n        window.Plotly.react(\\n          'chart',\\n          \" + JSON.stringify(data) + \",\\n          \" + JSON.stringify(layout) + \",\\n          \" + JSON.stringify(config) + \"\\n        );\\n      \");\n  };\n\n  var plotlyRelayout = function plotlyRelayout(layout) {\n    invoke(\"\\n        window.Plotly.relayout(\\n          'chart',\\n          \" + JSON.stringify(layout) + \"\\n        );\\n      \");\n  };\n\n  var plotlyRestyle = function plotlyRestyle(data, i) {\n    invoke(\"\\n        window.Plotly.restyle(\\n          'chart',\\n          \" + JSON.stringify(data) + \",\\n          \" + i + \"\\n        );\\n      \");\n  };\n\n  var webviewLoaded = function webviewLoaded() {\n    if (Platform.OS === 'android') {\n      invoke(errorHandlerFn);\n    }\n\n    invokeEncoded(props.enableFullPlotly ? PlotlyFull : PlotlyBasic);\n    var data = props.data,\n        config = props.config,\n        layout = props.layout;\n    initialPlot(data, layout, config);\n    loadedRef.current = true;\n  };\n\n  var onMessage = function onMessage(event) {\n    switch (event.nativeEvent.data) {\n      case messages.CHART_LOADED:\n        if (props.onLoad) props.onLoad();\n        break;\n\n      default:\n        if (props.debug) console.error(\"Unknown event \" + event.nativeEvent.data);\n        break;\n    }\n  };\n\n  useLayoutEffect(function () {\n    var lastProps = lastPropsRef.current;\n    lastPropsRef.current = props;\n    if (!loadedRef.current) return;\n\n    if (props.update) {\n      props.update({\n        data: lastProps.data,\n        layout: lastProps.layout,\n        config: lastProps.config\n      }, {\n        data: props.data,\n        layout: props.layout,\n        config: props.config\n      }, {\n        react: plotlyReact,\n        relayout: plotlyRelayout,\n        restyle: plotlyRestyle\n      });\n    } else {\n      plotlyReact(props.data, props.layout, props.config);\n    }\n  });\n  return React.createElement(WebView, {\n    ref: chart,\n    source: {\n      html: html\n    },\n    style: props.style || styles.container,\n    onLoad: webviewLoaded,\n    onMessage: onMessage,\n    originWhitelist: ['*'],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});\nexport default Plotly;","map":{"version":3,"sources":["../src/plotly.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { useRef, useLayoutEffect } from 'react';\r\nimport { StyleSheet, Platform } from 'react-native';\r\nimport { WebView } from 'react-native-webview';\r\nimport PlotlyBasic from './lib/PlotlyBasic';\r\nimport PlotlyFull from './lib/PlotlyFull';\r\n/*\r\nBase 64 encode source code\r\nPostmessage source code into webview\r\nWebview decodes and evals\r\nPlotly is now in the webview!\r\n*/\r\nconst messages = {\r\n    CHART_LOADED: 'CHART_LOADED',\r\n};\r\nconst errorHandlerFn = `\n  window.onerror = function(message, source, lineno, colno, error) {\n    document.getElementById('error').innerHTML += message + '\\\\n';\n  };\n`;\r\nconst Plotly = (props) => {\r\n    const lastPropsRef = useRef(props);\r\n    const chart = useRef(null);\r\n    const loadedRef = useRef(false);\r\n    // As of 2/5/2019 it seems that using a # in the html causes the css\r\n    // parsing to crash on Android\r\n    const html = `\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <style type=\"text/css\">\n        body {\n          margin: 0;\n          padding: 0;\n          width: 100vw;\n          height: 100vh;\n        }\n        .chart {\n          width: 100vw;\n          height: 100vh;\n          ${props.debug ? 'background: papayawhip;' : ''}\n        }\n        .error {\n          position: fixed;\n          top: 10vh;\n          max-width: 100vw;\n          max-height: 40vh;\n          overflow-y: scroll;\n          background: pink;\n          white-space: pre-wrap;\n        }\n        .debug {\n          position: fixed;\n          top: 50vh;\n          max-width: 100vw;\n          max-height: 40vh;\n          overflow-y: scroll;\n          background: rgb(234, 234, 234);\n          white-space: pre-wrap;\n          z-index: 1000;\n        }\n        </style>\n    </head>\n    \n    <body >\n      <div id=\"chart\" class=\"chart\"></div>\n      <pre id=\"error\" class=\"error\"></pre>\n      <pre id=\"debug\" class=\"debug\"></pre>\n    </body>\n    <script>\n      /* This only runs on iOS, on android it is posted */\n      ${errorHandlerFn}\n    </script>\n    </html>\n    `;\r\n    const invoke = (str) => {\r\n        if (chart && chart.current)\r\n            chart.current.injectJavaScript(`(function(){${str}})()`);\r\n    };\r\n    const invokeEncoded = (str) => {\r\n        invoke(`eval(atob(\"${str}\"));`);\r\n    };\r\n    // Can uncomment and call for debugging purposes\r\n    // const debug = (msg: string) => {\r\n    //   invoke(`document.getElementById('debug').innerHTML += \\`${msg}\\` + '\\\\n';`);\r\n    // };\r\n    const initialPlot = (data, layout, config) => {\r\n        invoke(`\n        window.Plotly.newPlot(\n          'chart',\n          ${JSON.stringify(data)},\n          ${JSON.stringify(layout)},\n          ${JSON.stringify(config)}\n        ).then(function() {\n          window.ReactNativeWebView.postMessage('${messages.CHART_LOADED}');\n        });\n      `);\r\n    };\r\n    const plotlyReact = (data, layout, config) => {\r\n        invoke(`\n        window.Plotly.react(\n          'chart',\n          ${JSON.stringify(data)},\n          ${JSON.stringify(layout)},\n          ${JSON.stringify(config)}\n        );\n      `);\r\n    };\r\n    const plotlyRelayout = (layout) => {\r\n        invoke(`\n        window.Plotly.relayout(\n          'chart',\n          ${JSON.stringify(layout)}\n        );\n      `);\r\n    };\r\n    const plotlyRestyle = (data, i) => {\r\n        invoke(`\n        window.Plotly.restyle(\n          'chart',\n          ${JSON.stringify(data)},\n          ${i}\n        );\n      `);\r\n    };\r\n    const webviewLoaded = () => {\r\n        if (Platform.OS === 'android') {\r\n            // On iOS this is included in a <script> tag\r\n            invoke(errorHandlerFn);\r\n        }\r\n        // Load plotly\r\n        invokeEncoded(props.enableFullPlotly ? PlotlyFull : PlotlyBasic);\r\n        const { data, config, layout } = props;\r\n        initialPlot(data, layout, config);\r\n        loadedRef.current = true;\r\n    };\r\n    const onMessage = (event) => {\r\n        // event type is messed up :(\r\n        switch (event.nativeEvent.data) {\r\n            case messages.CHART_LOADED:\r\n                if (props.onLoad)\r\n                    props.onLoad();\r\n                break;\r\n            default:\r\n                if (props.debug)\r\n                    console.error(`Unknown event ${event.nativeEvent.data}`);\r\n                break;\r\n        }\r\n    };\r\n    useLayoutEffect(() => {\r\n        const lastProps = lastPropsRef.current;\r\n        lastPropsRef.current = props;\r\n        // If we haven't done the initial plot we can't update\r\n        if (!loadedRef.current)\r\n            return;\r\n        if (props.update) {\r\n            // Let the user call the update functions\r\n            props.update({\r\n                data: lastProps.data,\r\n                layout: lastProps.layout,\r\n                config: lastProps.config,\r\n            }, {\r\n                data: props.data,\r\n                layout: props.layout,\r\n                config: props.config,\r\n            }, {\r\n                react: plotlyReact,\r\n                relayout: plotlyRelayout,\r\n                restyle: plotlyRestyle,\r\n            });\r\n        }\r\n        else {\r\n            // Default, just use Plotly.react\r\n            plotlyReact(props.data, props.layout, props.config);\r\n        }\r\n    });\r\n    return (<WebView ref={chart} source={{ html }} style={props.style || styles.container} onLoad={webviewLoaded} onMessage={onMessage} originWhitelist={['*']}/>);\r\n};\r\nconst styles = StyleSheet.create({\r\n    container: { flex: 1 },\r\n});\r\nexport default Plotly;\r\n//# sourceMappingURL=plotly.js.map"]},"metadata":{},"sourceType":"module"}