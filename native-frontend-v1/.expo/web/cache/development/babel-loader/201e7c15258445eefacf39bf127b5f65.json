{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/gdpvirus/Desktop/projects/proj_1/native-frontend-v1/screens/ResultModel.js\";\n\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Button, Overlay } from \"react-native-elements\";\nimport Plotly from \"react-native-plotly\";\nimport { loadResult } from \"../redux/actions/loadResult\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logout } from \"../redux/actions/auth\";\n\nvar ResultModel = function ResultModel(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      visibleH = _React$useState4[0],\n      setVisibleH = _React$useState4[1];\n\n  var toggleOverlay = function toggleOverlay() {\n    setVisible(!visible);\n  };\n\n  var toggleOverlayH = function toggleOverlayH() {\n    setVisibleH(!visibleH);\n  };\n\n  var dataset = [];\n  var layout = {\n    title: \"My cool chart!\"\n  };\n  var propTypes = {\n    loadResult: PropTypes.func.isRequired,\n    result: PropTypes.object,\n    load: PropTypes.object,\n    logout: PropTypes.func.isRequired\n  };\n  React.useEffect(function () {\n    console.log(props.result);\n  }, []);\n\n  if (props.result) {\n    if (props.result.type === 1) {\n      for (var index = 0; index < props.result.misc.roc_curve.fpr.length; index++) {\n        dataset.push({\n          x: props.result.misc.roc_curve.fpr[index],\n          y: props.result.misc.roc_curve.tpr[index],\n          name: \"Class\" + index + \" vs Rest\"\n        });\n      }\n    }\n  }\n\n  var commitsData = [{\n    date: \"0\",\n    count: 1\n  }];\n  return React.createElement(SafeAreaView, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, props.result ? React.createElement(ScrollView, {\n    contentContainerStyle: styles.container__box,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: styles.metrics,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, Object.keys(props.result.report).map(function (key, index) {\n    return React.createElement(Text, {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }, key, \": \", parseFloat(props.result.report[key]).toFixed(5));\n  }))), props.result.type === 1 ? React.createElement(React.Fragment, null, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, React.createElement(Button, {\n    containerStyle: {\n      margin: 10\n    },\n    title: \"ROC_CURVE\",\n    onPress: toggleOverlay,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }), React.createElement(Overlay, {\n    overlayStyle: {\n      height: \"75%\",\n      width: \"95%\"\n    },\n    isVisible: visible,\n    onBackdropPress: toggleOverlay,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, React.createElement(Plotly, {\n    enableFullPlotly: true,\n    data: dataset,\n    layout: {\n      title: \"Roc_curve\",\n      xaxis: {\n        title: {\n          text: \"FPR\"\n        }\n      },\n      yaxis: {\n        title: {\n          text: \"TPR(Recall)\"\n        }\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 19\n    }\n  }))), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  }, React.createElement(Button, {\n    containerStyle: {\n      margin: 10\n    },\n    title: \"HEAT_MAP\",\n    onPress: toggleOverlayH,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }), React.createElement(Overlay, {\n    overlayStyle: {\n      height: \"75%\",\n      width: \"95%\"\n    },\n    isVisible: visibleH,\n    onBackdropPress: toggleOverlayH,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, React.createElement(Plotly, {\n    enableFullPlotly: true,\n    data: [{\n      z: props.result.misc.conf_matrix,\n      type: \"heatmap\"\n    }],\n    layout: {\n      title: \"HeatMap\",\n      xaxis: {\n        title: {\n          text: \"Predicted\"\n        }\n      },\n      yaxis: {\n        title: {\n          text: \"Actual\"\n        }\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 19\n    }\n  })))) : props.result.type === 0 ? React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, React.createElement(Button, {\n    containerStyle: {\n      margin: 10\n    },\n    title: \"Learning_curve\",\n    onPress: toggleOverlay,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }), React.createElement(Overlay, {\n    overlayStyle: {\n      height: \"75%\",\n      width: \"95%\"\n    },\n    isVisible: visible,\n    onBackdropPress: toggleOverlay,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, React.createElement(Plotly, {\n    enableFullPlotly: true,\n    data: [{\n      y: props.result.misc.learning_curve.train_err,\n      color: \"smoker\",\n      name: \"train_err\",\n      line: {\n        width: 2.5\n      }\n    }, {\n      y: props.result.misc.learning_curve.val_err,\n      color: \"smoker\",\n      name: \"val_err\",\n      line: {\n        width: 2.5\n      }\n    }],\n    layout: {\n      title: \"Learning_curve\",\n      xaxis: {\n        title: {\n          text: \"Train Data Size\"\n        }\n      },\n      yaxis: {\n        title: {\n          text: \"RMSE\"\n        }\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }))) : null) : React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, \"Train To get Result\"));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    result: state.testResult.result,\n    load: state.loadResult.load\n  };\n};\n\nvar mapDispatchToProps = {\n  loadResult: loadResult,\n  logout: logout\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ResultModel);\nvar styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    backgroundColor: \"#51543F\",\n    flex: 1\n  },\n  container__box: {\n    justifyContent: \"space-between\",\n    overflow: \"scroll\"\n  },\n  metrics: {\n    backgroundColor: \"#C4C4C4\",\n    margin: 10,\n    alignItems: \"center\",\n    padding: 10\n  },\n  result: {\n    height: \"100%\",\n    backgroundColor: \"#C4C4C4\",\n    marginTop: 10\n  }\n});","map":{"version":3,"sources":["/home/gdpvirus/Desktop/projects/proj_1/native-frontend-v1/screens/ResultModel.js"],"names":["React","Button","Overlay","Plotly","loadResult","PropTypes","connect","logout","ResultModel","props","useState","visible","setVisible","visibleH","setVisibleH","toggleOverlay","toggleOverlayH","dataset","layout","title","propTypes","func","isRequired","result","object","load","useEffect","console","log","type","index","misc","roc_curve","fpr","length","push","x","y","tpr","name","commitsData","date","count","styles","container","container__box","metrics","Object","keys","report","map","key","parseFloat","toFixed","margin","height","width","xaxis","text","yaxis","z","conf_matrix","learning_curve","train_err","color","line","val_err","mapStateToProps","state","testResult","mapDispatchToProps","StyleSheet","create","display","backgroundColor","flex","justifyContent","overflow","alignItems","padding","marginTop"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { StyleSheet, Text, View, SafeAreaView, ScrollView } from \"react-native\";\nimport { Button, Overlay } from \"react-native-elements\";\nimport Plotly from \"react-native-plotly\";\nimport { loadResult } from \"../redux/actions/loadResult\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logout } from \"../redux/actions/auth\";\n\nconst ResultModel = (props) => {\n  const [visible, setVisible] = React.useState(false);\n  const [visibleH, setVisibleH] = React.useState(false);\n\n  const toggleOverlay = () => {\n    setVisible(!visible);\n  };\n\n  const toggleOverlayH = () => {\n    setVisibleH(!visibleH);\n  };\n\n  var dataset = [];\n  const layout = { title: \"My cool chart!\" };\n  const propTypes = {\n    loadResult: PropTypes.func.isRequired,\n    result: PropTypes.object,\n    load: PropTypes.object,\n    logout: PropTypes.func.isRequired,\n  };\n\n  React.useEffect(() => {\n    console.log(props.result);\n  }, []);\n\n  if (props.result) {\n    if (props.result.type === 1) {\n      for (\n        let index = 0;\n        index < props.result.misc.roc_curve.fpr.length;\n        index++\n      ) {\n        dataset.push({\n          x: props.result.misc.roc_curve.fpr[index],\n          y: props.result.misc.roc_curve.tpr[index],\n          name: `Class${index} vs Rest`,\n        });\n      }\n    }\n  }\n\n  const commitsData = [\n    { date: \"0\", count: 1 },\n    // { date: \"1\", count: 2 },\n  ];\n  return (\n    <SafeAreaView style={styles.container}>\n      {props.result ? (\n        <ScrollView contentContainerStyle={styles.container__box}>\n          <View>\n            <View style={styles.metrics}>\n              {Object.keys(props.result.report).map((key, index) => (\n                <Text key={index}>\n                  {key}: {parseFloat(props.result.report[key]).toFixed(5)}\n                </Text>\n              ))}\n            </View>\n          </View>\n          {props.result.type === 1 ? (\n            <>\n              <View>\n                <Button\n                  containerStyle={{ margin: 10 }}\n                  title=\"ROC_CURVE\"\n                  onPress={toggleOverlay}\n                />\n\n                <Overlay\n                  overlayStyle={{ height: \"75%\", width: \"95%\" }}\n                  isVisible={visible}\n                  onBackdropPress={toggleOverlay}\n                >\n                  <Plotly\n                    enableFullPlotly={true}\n                    data={dataset}\n                    layout={{\n                      title: \"Roc_curve\",\n                      xaxis: {\n                        title: {\n                          text: \"FPR\",\n                        },\n                      },\n                      yaxis: {\n                        title: {\n                          text: \"TPR(Recall)\",\n                        },\n                      },\n                    }}\n                  />\n                </Overlay>\n              </View>\n              <View>\n                <Button\n                  // disabled={true}\n                  containerStyle={{ margin: 10 }}\n                  title=\"HEAT_MAP\"\n                  onPress={toggleOverlayH}\n                />\n\n                <Overlay\n                  overlayStyle={{ height: \"75%\", width: \"95%\" }}\n                  isVisible={visibleH}\n                  onBackdropPress={toggleOverlayH}\n                >\n                  <Plotly\n                    enableFullPlotly={true}\n                    data={[\n                      {\n                        z: props.result.misc.conf_matrix,\n                        type: \"heatmap\",\n                      },\n                    ]}\n                    layout={{\n                      title: \"HeatMap\",\n                      xaxis: {\n                        title: {\n                          text: \"Predicted\",\n                        },\n                      },\n                      yaxis: {\n                        title: {\n                          text: \"Actual\",\n                        },\n                      },\n                    }}\n                  />\n                </Overlay>\n              </View>\n            </>\n          ) : props.result.type === 0 ? (\n            <View>\n              <Button\n                containerStyle={{ margin: 10 }}\n                title=\"Learning_curve\"\n                onPress={toggleOverlay}\n              />\n\n              <Overlay\n                overlayStyle={{ height: \"75%\", width: \"95%\" }}\n                isVisible={visible}\n                onBackdropPress={toggleOverlay}\n              >\n                <Plotly\n                  enableFullPlotly={true}\n                  data={[\n                    {\n                      y: props.result.misc.learning_curve.train_err,\n                      color: \"smoker\",\n                      name: \"train_err\",\n                      line: {\n                        width: 2.5,\n                      },\n                    },\n                    {\n                      y: props.result.misc.learning_curve.val_err,\n                      color: \"smoker\",\n                      name: \"val_err\",\n                      line: {\n                        width: 2.5,\n                      },\n                    },\n                  ]}\n                  layout={{\n                    title: \"Learning_curve\",\n                    xaxis: {\n                      title: {\n                        text: \"Train Data Size\",\n                      },\n                    },\n                    yaxis: {\n                      title: {\n                        text: \"RMSE\",\n                      },\n                    },\n                  }}\n                />\n              </Overlay>\n            </View>\n          ) : null}\n        </ScrollView>\n      ) : (\n        <Text>Train To get Result</Text>\n      )}\n    </SafeAreaView>\n  );\n};\nconst mapStateToProps = (state) => ({\n  result: state.testResult.result,\n  load: state.loadResult.load,\n});\nconst mapDispatchToProps = {\n  loadResult,\n  logout,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ResultModel);\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    backgroundColor: \"#51543F\",\n    flex: 1,\n  },\n  container__box: {\n    justifyContent: \"space-between\",\n    overflow: \"scroll\",\n  },\n  metrics: {\n    backgroundColor: \"#C4C4C4\",\n    margin: 10,\n    alignItems: \"center\",\n    padding: 10,\n  },\n  result: {\n    height: \"100%\",\n    backgroundColor: \"#C4C4C4\",\n    marginTop: 10,\n    //  height: \"100%\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}